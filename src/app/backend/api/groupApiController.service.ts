/**
 * Rights Microservice
 * Mockable microservice to manage user rights, user groups and group rights
 *
 * OpenAPI spec version: 0.0.1
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { GroupDTO } from '../model/groupDTO';
import { ModelApiResponse } from '../model/modelApiResponse';
import { RightDTO } from '../model/rightDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class GroupApiControllerService {

    protected basePath = '//localhost:8082/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Copies all rights from a Group to another Group
     * Copies all rights of a Group (srcGroupId) into another Group (destGroupId)
     * @param destGroupId The id of the Group which will be used as the copy destination
     * @param srcGroupId The id of the Group which will be used as a copy source
     * @param ticket The modification justified by this jira ticket
     * @param comment The user&#x27;s comment on the operation made
     * @param dateOfGrants Only the rights will be copied, which was granted on this day
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public copyGroupRights(destGroupId: number, srcGroupId: number, ticket: string, comment?: string, dateOfGrants?: string, observe?: 'body', reportProgress?: boolean): Observable<ModelApiResponse>;
    public copyGroupRights(destGroupId: number, srcGroupId: number, ticket: string, comment?: string, dateOfGrants?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelApiResponse>>;
    public copyGroupRights(destGroupId: number, srcGroupId: number, ticket: string, comment?: string, dateOfGrants?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelApiResponse>>;
    public copyGroupRights(destGroupId: number, srcGroupId: number, ticket: string, comment?: string, dateOfGrants?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (destGroupId === null || destGroupId === undefined) {
            throw new Error('Required parameter destGroupId was null or undefined when calling copyGroupRights.');
        }

        if (srcGroupId === null || srcGroupId === undefined) {
            throw new Error('Required parameter srcGroupId was null or undefined when calling copyGroupRights.');
        }

        if (ticket === null || ticket === undefined) {
            throw new Error('Required parameter ticket was null or undefined when calling copyGroupRights.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (comment !== undefined && comment !== null) {
            queryParameters = queryParameters.set('comment', <any>comment);
        }
        if (dateOfGrants !== undefined && dateOfGrants !== null) {
            queryParameters = queryParameters.set('dateOfGrants', <any>dateOfGrants);
        }
        if (destGroupId !== undefined && destGroupId !== null) {
            queryParameters = queryParameters.set('destGroupId', <any>destGroupId);
        }
        if (srcGroupId !== undefined && srcGroupId !== null) {
            queryParameters = queryParameters.set('srcGroupId', <any>srcGroupId);
        }
        if (ticket !== undefined && ticket !== null) {
            queryParameters = queryParameters.set('ticket', <any>ticket);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<ModelApiResponse>(`${this.basePath}/group/copyRights`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes the Right from the Group
     * Eliminates the connection between the Group and the Right provided (will not delete the right, just revokes)
     * @param groupId The id of the Group which right should be removed
     * @param rightId The id of the Right should be set for the Group
     * @param ticket The modification justified by this jira ticket
     * @param comment The user&#x27;s comment on the operation made
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteGroupRight(groupId: number, rightId: number, ticket: string, comment?: string, observe?: 'body', reportProgress?: boolean): Observable<ModelApiResponse>;
    public deleteGroupRight(groupId: number, rightId: number, ticket: string, comment?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelApiResponse>>;
    public deleteGroupRight(groupId: number, rightId: number, ticket: string, comment?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelApiResponse>>;
    public deleteGroupRight(groupId: number, rightId: number, ticket: string, comment?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling deleteGroupRight.');
        }

        if (rightId === null || rightId === undefined) {
            throw new Error('Required parameter rightId was null or undefined when calling deleteGroupRight.');
        }

        if (ticket === null || ticket === undefined) {
            throw new Error('Required parameter ticket was null or undefined when calling deleteGroupRight.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (comment !== undefined && comment !== null) {
            queryParameters = queryParameters.set('comment', <any>comment);
        }
        if (groupId !== undefined && groupId !== null) {
            queryParameters = queryParameters.set('groupId', <any>groupId);
        }
        if (rightId !== undefined && rightId !== null) {
            queryParameters = queryParameters.set('rightId', <any>rightId);
        }
        if (ticket !== undefined && ticket !== null) {
            queryParameters = queryParameters.set('ticket', <any>ticket);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<ModelApiResponse>(`${this.basePath}/group/deleteRight`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a Group by id
     * Returns a Group, based on the groupId provided
     * @param groupId The Api returns the Group by the Id provided
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGroupById(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<GroupDTO>;
    public getGroupById(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GroupDTO>>;
    public getGroupById(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GroupDTO>>;
    public getGroupById(groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling getGroupById.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (groupId !== undefined && groupId !== null) {
            queryParameters = queryParameters.set('groupId', <any>groupId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<GroupDTO>(`${this.basePath}/group/getGroupById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns Group Rights
     * Returns the rights of the Group provided
     * @param groupId The Api returns the rights of this Group
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGroupRights(groupId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<RightDTO>>;
    public getGroupRights(groupId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RightDTO>>>;
    public getGroupRights(groupId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RightDTO>>>;
    public getGroupRights(groupId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling getGroupRights.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (groupId !== undefined && groupId !== null) {
            queryParameters = queryParameters.set('groupId', <any>groupId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<RightDTO>>(`${this.basePath}/group/getRights`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns groups
     * Returns all Groups
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGroups(observe?: 'body', reportProgress?: boolean): Observable<Array<GroupDTO>>;
    public getGroups(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GroupDTO>>>;
    public getGroups(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GroupDTO>>>;
    public getGroups(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<GroupDTO>>(`${this.basePath}/group/getGroups`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds the Right to the Group
     * Creates connection between the provided Group and Right, and also sets other group right data
     * @param groupId The id of the Group which Right should be set
     * @param rightId The id of the Right should be set for the Group
     * @param ticket The modification justified by this jira ticket
     * @param comment The user&#x27;s comment on the operation made
     * @param expireDate The date when the Right grant expires, the Right will be revoked on that day
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setGroupRight(groupId: number, rightId: number, ticket: string, comment?: string, expireDate?: string, observe?: 'body', reportProgress?: boolean): Observable<ModelApiResponse>;
    public setGroupRight(groupId: number, rightId: number, ticket: string, comment?: string, expireDate?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelApiResponse>>;
    public setGroupRight(groupId: number, rightId: number, ticket: string, comment?: string, expireDate?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelApiResponse>>;
    public setGroupRight(groupId: number, rightId: number, ticket: string, comment?: string, expireDate?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling setGroupRight.');
        }

        if (rightId === null || rightId === undefined) {
            throw new Error('Required parameter rightId was null or undefined when calling setGroupRight.');
        }

        if (ticket === null || ticket === undefined) {
            throw new Error('Required parameter ticket was null or undefined when calling setGroupRight.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (comment !== undefined && comment !== null) {
            queryParameters = queryParameters.set('comment', <any>comment);
        }
        if (expireDate !== undefined && expireDate !== null) {
            queryParameters = queryParameters.set('expireDate', <any>expireDate);
        }
        if (groupId !== undefined && groupId !== null) {
            queryParameters = queryParameters.set('groupId', <any>groupId);
        }
        if (rightId !== undefined && rightId !== null) {
            queryParameters = queryParameters.set('rightId', <any>rightId);
        }
        if (ticket !== undefined && ticket !== null) {
            queryParameters = queryParameters.set('ticket', <any>ticket);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<ModelApiResponse>(`${this.basePath}/group/setRight`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
