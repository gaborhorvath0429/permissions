/**
 * Rights Microservice
 * Mockable microservice to manage user rights, user groups and group rights
 *
 * OpenAPI spec version: 0.0.1
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ModelApiResponse } from '../model/modelApiResponse';
import { Right } from '../model/right';
import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class UserService {

    protected basePath = '//localhost:8082/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Removes the Right from the User
     * Eliminates the connection between the User and the Right provided (will not delete the right, just revokes)
     * @param rightId The id of the Right should be removed from the User
     * @param userId The id of the User which right should be removed
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUserRight(rightId: number, userId: number, observe?: 'body', reportProgress?: boolean): Observable<ModelApiResponse>;
    public deleteUserRight(rightId: number, userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelApiResponse>>;
    public deleteUserRight(rightId: number, userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelApiResponse>>;
    public deleteUserRight(rightId: number, userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (rightId === null || rightId === undefined) {
            throw new Error('Required parameter rightId was null or undefined when calling deleteUserRight.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteUserRight.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (rightId !== undefined && rightId !== null) {
            queryParameters = queryParameters.set('rightId', <any>rightId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<ModelApiResponse>(`${this.basePath}/user/deleteRight`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns User Rights
     * Returns the rights of the User provided
     * @param userId The Api returns the rights of this User
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserRights(userId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Right>>;
    public getUserRights(userId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Right>>>;
    public getUserRights(userId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Right>>>;
    public getUserRights(userId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Right>>(`${this.basePath}/user/getRights`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns Users
     * Returns all Users, or just a subset based on the parameters provided
     * @param groupId Starting group id, groups below this group will be returned. If not provided, then all users will be returned.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsers(groupId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public getUsers(groupId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public getUsers(groupId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public getUsers(groupId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (groupId !== undefined && groupId !== null) {
            queryParameters = queryParameters.set('groupId', <any>groupId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.basePath}/user/getUsers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds the Right to the User
     * Creates connection between the provided User and Right, and also sets other User right data
     * @param rightId The id of the Right should be set for the User
     * @param userId The id of the User which Right should be set
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setUserRight(rightId: number, userId: number, observe?: 'body', reportProgress?: boolean): Observable<ModelApiResponse>;
    public setUserRight(rightId: number, userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelApiResponse>>;
    public setUserRight(rightId: number, userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelApiResponse>>;
    public setUserRight(rightId: number, userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (rightId === null || rightId === undefined) {
            throw new Error('Required parameter rightId was null or undefined when calling setUserRight.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling setUserRight.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (rightId !== undefined && rightId !== null) {
            queryParameters = queryParameters.set('rightId', <any>rightId);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<ModelApiResponse>(`${this.basePath}/user/setRight`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
